const mongoose = require('mongoose');

const alertSchema = new mongoose.Schema({
  dealerId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Dealer',
    required: true,
    index: true
  },
  alertId: {
    type: String,
    required: true,
    unique: true
  },
  type: {
    type: String,
    enum: ['Overdue Rental', 'Overdue Payment', 'Vehicle Damage', 'Maintenance Due', 'Repair Required', 'Insurance Expiry', 'Contract Expiry'],
    required: true
  },
  priority: {
    type: String,
    enum: ['Low', 'Medium', 'High', 'Critical'],
    default: 'Medium'
  },
  title: {
    type: String,
    required: true
  },
  message: {
    type: String,
    required: true
  },
  relatedEntity: {
    entityType: { type: String, enum: ['Customer', 'Vehicle', 'Rental', 'Payment'] },
    entityId: mongoose.Schema.Types.ObjectId,
    entityName: String
  },
  status: {
    type: String,
    enum: ['Active', 'Acknowledged', 'Resolved', 'Dismissed'],
    default: 'Active'
  },
  actionRequired: {
    type: Boolean,
    default: true
  },
  actionTaken: {
    action: String,
    takenBy: { type: mongoose.Schema.Types.ObjectId, ref: 'Dealer' },
    takenAt: Date,
    notes: String
  },
  dueDate: Date,
  resolvedDate: Date,
  autoGenerated: {
    type: Boolean,
    default: true
  },
  notificationSent: {
    email: { type: Boolean, default: false },
    sms: { type: Boolean, default: false },
    push: { type: Boolean, default: false }
  }
}, {
  timestamps: true
});

// Compound indexes for efficient queries
alertSchema.index({ dealerId: 1, status: 1 });
alertSchema.index({ dealerId: 1, type: 1 });
alertSchema.index({ dealerId: 1, priority: 1 });
alertSchema.index({ dealerId: 1, createdAt: -1 });

module.exports = mongoose.model('Alert', alertSchema);